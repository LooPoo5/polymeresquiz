
#!/bin/bash

# Script de configuration initiale
set -e

echo "üöÄ Configuration initiale de Quiz App"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.production.yml" ]; then
    log_error "Fichier docker-compose.production.yml non trouv√©"
    log_error "Assurez-vous d'√™tre dans le r√©pertoire racine du projet"
    exit 1
fi

# Cr√©er l'arborescence n√©cessaire
log_info "Cr√©ation de l'arborescence..."
mkdir -p {data/postgres,logs,uploads,ssl}

# V√©rifier si .env existe
if [ ! -f ".env" ]; then
    log_warn "Fichier .env non trouv√©"
    if [ -f ".env.production" ]; then
        log_info "Copie de .env.production vers .env"
        cp .env.production .env
        log_warn "‚ö†Ô∏è  IMPORTANT: Modifiez le fichier .env avec vos valeurs !"
    else
        log_error "Aucun fichier de configuration trouv√©"
        log_error "Cr√©ez un fichier .env avec les variables n√©cessaires"
        exit 1
    fi
fi

# Rendre les scripts ex√©cutables
log_info "Configuration des permissions..."
chmod +x scripts/*.sh

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas install√©"
    exit 1
fi

# R√©sum√©
log_info "‚úÖ Configuration termin√©e !"
echo ""
echo "Prochaines √©tapes :"
echo "1. Modifiez le fichier .env avec vos valeurs"
echo "2. Ex√©cutez: ./scripts/deploy-final.sh"
echo ""
echo "Pour le d√©veloppement local :"
echo "- Frontend: cd frontend && npm install && npm run dev"
echo "- Backend: cd backend && npm install && npm run dev"
echo "- Base de donn√©es: docker-compose -f docker-compose.dev.yml up postgres-dev"
