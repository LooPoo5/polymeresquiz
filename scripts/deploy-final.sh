
#!/bin/bash

# Script de d√©ploiement final pour NAS Ugreen
set -e

APP_DIR="/volume1/quiz-app"
BACKUP_DIR="$APP_DIR/backups"

echo "üöÄ D√©ploiement FINAL de l'application Quiz sur NAS Ugreen"

# V√©rifications pr√©alables
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

# Cr√©ation de l'arborescence compl√®te
echo "üìÅ Cr√©ation de l'arborescence compl√®te..."
mkdir -p $APP_DIR/{backend,config,data/postgres,logs,ssl,uploads,database}
mkdir -p $BACKUP_DIR

cd $APP_DIR

# V√©rification du fichier .env
if [ ! -f ".env" ]; then
    echo "‚ùå Fichier .env manquant !"
    echo "Copiez le fichier .env.example vers .env et configurez vos valeurs"
    exit 1
fi

# Arr√™t des services existants
echo "‚èπÔ∏è Arr√™t des services existants..."
docker-compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || true

# Nettoyage des images obsol√®tes
echo "üßπ Nettoyage des images obsol√®tes..."
docker system prune -f 2>/dev/null || true

# Construction des images
echo "üî® Construction des images (cela peut prendre du temps)..."

# Construction backend
echo "  ‚Üí Construction du backend..."
docker build -f Dockerfile.backend -t quiz-app-backend .

# Construction frontend
echo "  ‚Üí Construction du frontend..."
docker build -f Dockerfile.frontend -t quiz-app-frontend .

# D√©marrage des services
echo "üöÄ D√©marrage des services..."
docker-compose -f docker-compose.production.yml up -d

# Attente du d√©marrage complet
echo "‚è≥ Attente du d√©marrage complet..."
sleep 60

# Tests de connectivit√©
echo "üîç V√©rification des services..."

# Test base de donn√©es
echo "  ‚Üí Test PostgreSQL..."
if docker exec quiz-postgres pg_isready -U quiz_user > /dev/null 2>&1; then
    echo "  ‚úÖ PostgreSQL : OK"
else
    echo "  ‚ùå PostgreSQL : Erreur"
fi

# Test API
echo "  ‚Üí Test API..."
if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
    echo "  ‚úÖ API Backend : OK"
else
    echo "  ‚ùå API Backend : Erreur"
fi

# Test Frontend
echo "  ‚Üí Test Frontend..."
if curl -f http://localhost:80 > /dev/null 2>&1; then
    echo "  ‚úÖ Frontend : OK"
else
    echo "  ‚ùå Frontend : Erreur"
fi

# Affichage du statut final
echo ""
echo "üìä Statut des conteneurs :"
docker-compose -f docker-compose.production.yml ps

# Configuration des sauvegardes automatiques
echo ""
echo "üíæ Configuration des sauvegardes..."
(crontab -l 2>/dev/null; echo "0 2 * * * $APP_DIR/scripts/maintenance.sh backup") | crontab -

# Informations finales
LOCAL_IP=$(hostname -I | awk '{print $1}')
echo ""
echo "üéâ D√©ploiement termin√© avec succ√®s !"
echo ""
echo "üìç Acc√®s √† l'application :"
echo "  ‚Ä¢ Local : http://$LOCAL_IP"
echo "  ‚Ä¢ API : http://$LOCAL_IP:3001/api"
echo ""
echo "üõ†Ô∏è Commandes utiles :"
echo "  ‚Ä¢ Logs : docker-compose -f docker-compose.production.yml logs -f"
echo "  ‚Ä¢ Statut : docker-compose -f docker-compose.production.yml ps"
echo "  ‚Ä¢ Red√©marrage : docker-compose -f docker-compose.production.yml restart"
echo ""
echo "üìã Prochaines √©tapes :"
echo "  1. Testez l'application via votre navigateur"
echo "  2. Configurez votre routeur pour l'acc√®s distant (optionnel)"
echo "  3. Configurez SSL/HTTPS (optionnel)"
echo ""
