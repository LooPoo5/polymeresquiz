
# Frontend Dockerfile multi-stage
FROM node:18-alpine as builder

# Mettre à jour npm vers la dernière version stable
RUN npm install -g npm@11.4.2

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers de configuration
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./

# Mettre à jour browserslist avant l'installation
RUN npx update-browserslist-db@latest

# Clean install to avoid cache issues
RUN rm -rf node_modules package-lock.json
RUN npm ci

# Copier le code source
COPY src ./src
COPY public ./public
COPY index.html ./
COPY .browserslistrc ./

# Clean any build cache and create the build
RUN rm -rf dist
RUN npm run build

# Stage de production avec Nginx
FROM nginx:alpine

# Copier les fichiers buildés
COPY --from=builder /app/dist /usr/share/nginx/html

# Créer les dossiers nécessaires
RUN mkdir -p /var/log/nginx /etc/nginx/ssl

# Permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Exposer les ports
EXPOSE 80 443

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:80 || exit 1

# Démarrer Nginx
CMD ["nginx", "-g", "daemon off;"]
